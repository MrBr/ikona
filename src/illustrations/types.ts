import fsExtra from 'fs-extra'
import { glob } from 'glob'
import * as path from 'node:path'

import { getCommandLineArg } from '../utils/args'
import { validatePath, writeIfChanged } from '../utils/validations'

const cwd = process.cwd()

const inputDir = getCommandLineArg('input-dir')
validatePath(inputDir, 'Input dir is required')

const inputDirRelative = path.relative(cwd, inputDir)
const typeDir = path.join(cwd, 'types')

await fsExtra.ensureDir(typeDir)

const command = 'yarn workspace web run gen:illustrations:types'
const generatedByText = `This file is generated by ${command}. Don't edit it manually.`

const files = glob
  .sync('**/*.svg', {
    cwd: inputDir,
  })
  .sort((a, b) => a.localeCompare(b))

const shouldVerboseLog =
  process.argv.includes('--verbose') || process.argv.includes('-v')
const logVerbose = shouldVerboseLog ? console.log : () => {}

if (files.length === 0) {
  console.log(`No SVG files found in ${inputDirRelative}`)
} else {
  await generateTypes(files, typeDir)
}

async function generateTypes(files: Array<string>, typeDir: string) {
  const typeOutputFilepath = path.join(typeDir, 'illustration-path.d.ts')
  const currentTypes = await fsExtra
    .readFile(typeOutputFilepath, 'utf8')
    .catch(() => '')

  const typesUpToDate = files.every((path) =>
    currentTypes.includes(`"${path}"`)
  )

  if (typesUpToDate) {
    logVerbose(`Icons are up to date`)
    return
  }

  for (const file of files) {
    logVerbose('âœ…', file)
  }

  const stringifiedIconNames = files.map((path) => JSON.stringify(path))

  const typeOutputContent = `// ${generatedByText}

export type IllustrationPath =
\t| ${stringifiedIconNames.join('\n\t| ').replace(/"/g, "'")};
`
  const typesChanged = await writeIfChanged(
    typeOutputFilepath,
    typeOutputContent
  )

  logVerbose(`Manifest saved to ${path.relative(cwd, typeOutputFilepath)}`)

  if (typesChanged) {
    console.log(`Generated ${files.length} icons`)
  }
}
